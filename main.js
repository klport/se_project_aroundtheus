(function(){"use strict";var __webpack_modules__={443:function(){eval('\n// UNUSED EXPORTS: previewImageModal\n\n;// CONCATENATED MODULE: ./src/components/Card.js\nclass Card {\n  constructor(_ref, cardSelector, handleImageClick, handleDeleteClick, handleLikeClick, handleUnlikeClick) {\n    let {\n      _id,\n      name,\n      link,\n      isLiked\n    } = _ref;\n    this.id = _id;\n    this._name = name;\n    this._link = link;\n    this.isLiked = isLiked;\n    this._cardSelector = cardSelector;\n    this._handleImageClick = handleImageClick;\n    this._handleDeleteClick = handleDeleteClick;\n    this._handleLikeClick = handleLikeClick;\n    this._handleUnlikeClick = handleUnlikeClick;\n    this._cardElement = document.querySelector(this._cardSelector).content.querySelector(".card").cloneNode(true);\n    this._deleteButton = this._cardElement.querySelector(".card__delete-button");\n  }\n  _setEventListeners() {\n    //.card__like-button"\n\n    this._likeButton.addEventListener("click", () => {\n      // check the isLiked property. If false (button is unliked curently), we like button. If true, we unlike button\n      if (this.isLiked) {\n        this._handleUnlikeClick(this);\n      } else {\n        this._handleLikeClick(this);\n      }\n    });\n\n    //".card__delete-button"\n\n    this._deleteButton.addEventListener("click", () => {\n      this._handleDeleteClick(this);\n\n      // call the api to delete the card - VIA LOOSE COUPLING - call it in the index.js in the handleDelete function\n      // if success, call the _handleDeleteCard()\n    });\n\n    this._cardImage.addEventListener("click", () => {\n      this._handleImageClick(this._name, this._link);\n    });\n  }\n  handleDeleteCardLocally() {\n    this._cardElement.remove();\n    this._cardElement = null;\n  }\n\n  // _handleLikeIcon() {\n  //   this._likeButton.classList.toggle("card__like-button_active");\n  // }\n\n  addLike() {\n    this.isLiked = true;\n    this._likeButton.classList.add("card__like-button_active");\n  }\n  removeLike() {\n    this.isLiked = false;\n    this._likeButton.classList.remove("card__like-button_active");\n  }\n  getView() {\n    this._cardImage = this._cardElement.querySelector(".card__image");\n    this._cardTitle = this._cardElement.querySelector(".card__title");\n    this._cardImage.src = this._link;\n    this._cardTitle.textContent = this._name;\n    this._cardImage.alt = this._name;\n\n    //get the card view\n\n    this._likeButton = this._cardElement.querySelector(".card__like-button");\n    //run on page load; call this w/in this class on page load\n    this._setLikeButtonState();\n    //set event listenner\n    this._setEventListeners();\n    //return the card\n    return this._cardElement;\n  }\n\n  //check isLiked property. If true fill in the button, if false, unlike the button\n  _setLikeButtonState() {\n    this.isLiked ? this.addLike() : this.removeLike();\n  }\n}\n;// CONCATENATED MODULE: ./src/components/FormValidator.js\nclass FormValidator {\n  constructor(settings, formElement) {\n    this._inputSelector = settings.inputSelector;\n    this._submitButtonSelector = settings.submitButtonSelector;\n    this._inactiveButtonClass = settings.inactiveButtonClass;\n    this._inputErrorClass = settings.inputErrorClass;\n    this._errorClass = settings.errorClass;\n    this._formEl = formElement;\n  }\n  _setEventListeners() {\n    this._inputEls = [...this._formEl.querySelectorAll(this._inputSelector)];\n    this._submitButton = this._formEl.querySelector(this._submitButtonSelector);\n    this._inputEls.forEach(inputEl => {\n      inputEl.addEventListener("input", e => {\n        this._checkInputValidity(inputEl);\n        this.toggleButtonState(this._submitButton);\n      });\n    });\n  }\n  _checkInputValidity(inputEl) {\n    if (!inputEl.validity.valid) {\n      return this._showInputError(inputEl);\n    }\n    this._hideInputError(inputEl);\n  }\n  _hasInvalidInput() {\n    return !this._inputEls.every(inputEl => inputEl.validity.valid);\n  }\n  toggleButtonState() {\n    if (this._hasInvalidInput()) {\n      this._submitButton.classList.add(this._inactiveButtonClass);\n      this._submitButton.disabled = true;\n      return;\n    }\n    this._submitButton.classList.remove(this._inactiveButtonClass);\n    this._submitButton.disabled = false;\n  }\n  _showInputError(inputEl) {\n    const errorMessageEl = this._formEl.querySelector(`#${inputEl.id}-error`);\n    inputEl.classList.add(this._inputErrorClass);\n    errorMessageEl.textContent = inputEl.validationMessage;\n    errorMessageEl.classList.add(this._errorClass);\n  }\n  _hideInputError(inputEl) {\n    const errorMessageEl = this._formEl.querySelector(`#${inputEl.id}-error`);\n    inputEl.classList.remove(this._inputErrorClass);\n    errorMessageEl.textContent = "";\n    errorMessageEl.classList.remove(this._errorClass);\n  }\n  resetValidation() {\n    this.toggleButtonState();\n    this._inputEls.forEach(input => {\n      input.value = \'\';\n      this._hideInputError(input);\n    });\n  }\n  enableValidation() {\n    this._formEl.addEventListener("submit", e => {\n      e.preventDefault();\n    });\n    this._setEventListeners();\n  }\n}\n;// CONCATENATED MODULE: ./src/components/Popup.js\nclass Popup {\n  constructor(modalSelector) {\n    //{popupSelector}\n    this._popupElement = document.querySelector(modalSelector);\n    this._closeButton = this._popupElement.querySelector(".modal__close");\n  }\n  open() {\n    console.log(this);\n    this._popupElement.classList.add("modal_opened");\n    document.addEventListener("keydown", this._handleEscClose);\n  }\n  close() {\n    // closes popup\n    console.log(this);\n    this._popupElement.classList.remove("modal_opened");\n    document.removeEventListener("keydown", this._handleEscClose);\n\n    // modal.removeEventListener("mousedown", handleModalClick);\n  }\n\n  _handleModalClick = event => {\n    if (event.target.classList.contains("modal_opened")) {\n      // closeModal(event.target);\n      this.close();\n    }\n  };\n  _handleEscClose = evt => {\n    console.log(this);\n    // listens for esc button - why is it private?\n    if (evt.key === "Escape") {\n      this.close();\n    }\n  };\n  setEventListeners() {\n    // sets event listeners - adds a click event listener to the close icon of the popup.\n    this._popupElement.addEventListener("mousedown", evt => {\n      if (evt.target === this._popupElement || evt.target === this._closeButton) {\n        this.close();\n      }\n    });\n  }\n}\n;// CONCATENATED MODULE: ./src/components/PopupWithForm.js\n\nclass PopupWithForm extends Popup {\n  constructor(modalSelector, handleFormSubmit) {\n    super(modalSelector);\n    this._form = this._popupElement.querySelector(".modal__form");\n    this._inputList = this._form.querySelectorAll(".modal__input");\n    this._handleFormSubmit = handleFormSubmit;\n    this.setEventListeners();\n  }\n  _getInputValues() {\n    const formValues = {};\n    this._inputList.forEach(input => {\n      formValues[input.name] = input.value;\n    });\n    return formValues;\n  }\n  setInputValues(userInfo) {\n    //userInfo.name, userInfo.description\n    const userArray = Object.values(userInfo);\n    for (let i = 0; i < userArray.length; i++) {\n      this._inputList[i].value = userArray[i];\n    }\n  }\n\n  //   // Find the submit button in the form by class name\n  // const submitButton = updateAvatarForm.querySelector(".modal__button");\n  // // Update the text before making the API call\n  // submitButton.textContent = "Saving...";\n\n  setButtonText(buttonText) {\n    this._form.querySelector(".modal__button").textContent = buttonText;\n  }\n  setEventListeners() {\n    this._form.addEventListener("submit", evt => {\n      evt.preventDefault();\n      this._handleFormSubmit(this._getInputValues());\n      //this.close();\n    });\n\n    super.setEventListeners();\n  }\n}\n;// CONCATENATED MODULE: ./src/components/UserInfo.js\nclass UserInfo {\n  constructor(nameSelector, descriptionSelector, avatarSelector) {\n    this._nameElement = document.querySelector(nameSelector);\n    this._descriptionElement = document.querySelector(descriptionSelector);\n    this._avatarElement = document.querySelector(avatarSelector);\n  }\n  getUserInfo() {\n    return {\n      name: this._nameElement.textContent,\n      description: this._descriptionElement.textContent\n    };\n  }\n  setUserInfo(userName, userDescription) {\n    this._nameElement.textContent = userName;\n    this._descriptionElement.textContent = userDescription;\n  }\n  setAvatar(link) {\n    this._avatarElement.src = link;\n  }\n}\n;// CONCATENATED MODULE: ./src/components/PopupWithImage.js\n\nclass PopupWithImage extends Popup {\n  constructor(popupSelector) {\n    super(popupSelector);\n    this._image = this._popupElement.querySelector(".modal__image");\n    this._caption = this._popupElement.querySelector(".modal__text");\n    this.setEventListeners();\n  }\n  open(name, link) {\n    console.log(name, link);\n    this._image.src = link;\n    this._image.alt = name;\n    this._caption.textContent = name;\n    super.open();\n  }\n}\n;// CONCATENATED MODULE: ./src/components/Section.js\nclass Section {\n  constructor(_ref, containerSelector) {\n    let {\n      items,\n      renderer\n    } = _ref;\n    this._items = items; //an array of data that we want to convert to html and then place on the page\n    this._renderer = renderer; //function that takes data and converts it to html\n    this._container = document.querySelector(containerSelector); //this place we want to append or prepend the html to\n  }\n\n  renderItems() {\n    this._items.forEach(data => {\n      // this.addItem(data, "append");\n      const cardEl = this._renderer(data);\n      this.addItem(cardEl);\n    });\n  }\n\n  // addItem(data, placement = "prepend") {\n  //   const element = this._renderer(data);\n  //   if (placement === "append") {\n  //     this._container.append(element);\n  //   } else if (placement === "prepend") {\n  //     this._container.prepend(element);\n  //   }\n  // }\n\n  addItem(data) {\n    this._container.prepend(data);\n  }\n\n  // setItems{\n\n  // }\n\n  // deleteItems{\n  //   this._items.forEach((item)=>)\n  //   console.log(item));\n\n  //   //delete Item using id, use a function that compares. filter is a method run on an array, returns a new array for which the filter was TRUE \n\n  // }\n}\n\n/* harmony default export */ var components_Section = (Section);\n;// CONCATENATED MODULE: ./src/utils/constants.js\nconst initialCards = [{\n  name: "Yosemite Valley",\n  link: "https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/yosemite.jpg"\n}, {\n  name: "Lake Louise",\n  link: "https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/lake-louise.jpg"\n}, {\n  name: "Bald Mountains",\n  link: "https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/bald-mountains.jpg"\n}, {\n  name: "Latemar",\n  link: "https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/latemar.jpg"\n}, {\n  name: "Vanoise National Park",\n  link: "https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/vanoise.jpg"\n}, {\n  name: "Lago di Braies",\n  link: "https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/lago.jpg "\n}];\nconst config = {\n  formSelector: ".modal__form",\n  inputSelector: ".modal__input",\n  submitButtonSelector: ".modal__button",\n  inactiveButtonClass: "modal__button_disabled",\n  inputErrorClass: "modal__input_error",\n  errorClass: ".modal_error_visible"\n};\n;// CONCATENATED MODULE: ./src/components/PopupWithConfirmation.js\n\nclass PopupWithConfirmation extends Popup {\n  constructor(popupSelector, handleFormSubmit) {\n    super(popupSelector);\n    this._form = this._popupElement.querySelector(".modal__form");\n    this._handleFormSubmit = handleFormSubmit;\n    this.setEventListeners();\n  }\n  setSubmitHandler(handler) {\n    this._handleFormSubmit = handler;\n  }\n  setEventListeners() {\n    super.setEventListeners();\n    // sets event listeners - adds a click event listener to the close icon of the popup.\n    this._form.addEventListener("submit", evt => {\n      evt.preventDefault();\n      this._handleFormSubmit();\n    });\n  }\n  setButtonText(buttonText) {\n    this._form.querySelector(".modal__button").textContent = buttonText;\n  }\n}\n;// CONCATENATED MODULE: ./src/components/API.js\nclass API {\n  constructor(_ref) {\n    let {\n      baseUrl,\n      headers\n    } = _ref;\n    this._baseUrl = baseUrl;\n    this._headers = headers;\n    // constructor body\n  }\n\n  _checkResponse(res) {\n    if (res.ok) {\n      return res.json();\n    }\n    return Promise.reject(`Error :${res.status}`);\n  }\n  getInitialCards() {\n    return fetch(`${this._baseUrl}/cards`, {\n      headers: this._headers\n    }).then(res => this._checkResponse(res));\n  }\n  getUserInfo() {\n    return fetch(`${this._baseUrl}/users/me`, {\n      headers: this._headers\n    }).then(res => this._checkResponse(res));\n  }\n  updateUserInfo(_ref2) {\n    let {\n      title,\n      description\n    } = _ref2;\n    return fetch(`${this._baseUrl}/users/me`, {\n      method: "PATCH",\n      headers: this._headers,\n      body: JSON.stringify({\n        name: title,\n        about: description\n      })\n    }).then(res => this._checkResponse(res));\n  }\n  addCard(_ref3) {\n    let {\n      name,\n      link\n    } = _ref3;\n    return fetch(`${this._baseUrl}/cards`, {\n      method: "POST",\n      headers: this._headers,\n      body: JSON.stringify({\n        name,\n        link\n      })\n    }).then(res => this._checkResponse(res));\n  }\n  deleteCard(cardId) {\n    return fetch(`${this._baseUrl}/cards/${cardId}`, {\n      //need to add the variable of cardID\n      method: "DELETE",\n      headers: this._headers\n    }).then(res => this._checkResponse(res));\n  }\n  updateCardLike(cardId, isLiked) {\n    return fetch(`${this._baseUrl}/cards/${cardId}/likes`, {\n      method: isLiked ? "DELETE" : "PUT",\n      headers: this._headers\n    }).then(res => this._checkResponse(res));\n  }\n  updateAvatar(link) {\n    return fetch(`${this._baseUrl}/users/me/avatar`, {\n      method: "PATCH",\n      headers: this._headers,\n      body: JSON.stringify(link)\n    }).then(res => this._checkResponse(res));\n  }\n}\n;// CONCATENATED MODULE: ./src/pages/index.js\n\n\n\n\n\n//import avatarSrc from "./images/jacques-cousteau(1).jpg";\n\n\n\n\n\n\n//API\n\nconst api = new API({\n  baseUrl: "https://around-api.en.tripleten-services.com/v1",\n  headers: {\n    authorization: "921767a7-5253-4397-9674-d9dd7ed6801d",\n    "Content-Type": "application/json"\n  }\n});\n\n//Elements\nconst cardsWrap = document.querySelector(".cards__list");\nconst editProfileModal = document.querySelector("#edit-modal");\n//const addCardModal = document.querySelector("#add-card-modal");\nconst profileFormElement = editProfileModal.querySelector(".modal__form");\nconst addCardFormElement = document.querySelector("#add-card-form");\n//const previewImageModal = document.querySelector("#previewImageModal");\nconst modalImage = document.querySelector("#modalImage");\nconst modalText = document.querySelector("#modalText");\nconst updateAvatarForm = document.querySelector("#change-profile-picture-form");\n\n// Buttons and Other DOM nodes\n\nconst profileEditButton = document.querySelector(".profile__edit-button");\nconst profileModalCloseButton = editProfileModal.querySelector(".modal__close");\nconst addCardModalCloseButton = document.querySelector("#add-card-close-button");\nconst profileTitle = document.querySelector(".profile__title");\nconst profileDescription = document.querySelector(".profile__description");\nconst addNewCardButton = document.querySelector(".profile__add-button");\nconst closePreviewImageButton = document.querySelector("#previewCloseBtn");\n\n//Form Data\nconst nameInput = profileFormElement.querySelector(".modal__input_type_name");\nconst jobInput = profileFormElement.querySelector(".modal__input_type_description");\n\n//objects\n\nconst profileFormValidator = new FormValidator(config, profileFormElement);\nconst addFormValidator = new FormValidator(config, addCardFormElement);\nconst profileEditModal = new PopupWithForm("#edit-modal", handleProfileFormSubmit);\nconst editAvatarModal = new PopupWithForm("#change-profile-picture-modal", handleAvatarFormSubmit //create a function of this name that runs after I submit the form//\n);\n\nconst avatarUpdateValidator = new FormValidator(config, updateAvatarForm);\nconst deleteConfirmationModal = new PopupWithConfirmation("#delete-confirmation-modal");\nconst addCardModal = new PopupWithForm("#add-card-modal", handleCardAddSubmit);\nconst previewImageModal = new PopupWithImage("#previewImageModal");\n\n// call setEventListeners\n\nconst profileUserInfo = new UserInfo(".profile__title", ".profile__description", ".profile__image");\n\n//functions\n\nfunction handleProfileFormSubmit(formData) {\n  //fetch request to change the name and description on the server\n  profileEditModal.setButtonText("Saving...");\n  //profileEditModal.reset();\n  api.updateUserInfo(formData).then(res => {\n    profileUserInfo.setUserInfo(res.name, res.about);\n    profileEditModal.close();\n    //modal__form.reset();\n  }).catch(err => {\n    console.error(err);\n    alert("Failed to change user info");\n    console.log(formData);\n  }).finally(() => {\n    profileEditModal.setButtonText("Save");\n  });\n}\nfunction handleCardAddSubmit(inputValues) {\n  const cardData = {\n    name: inputValues.title,\n    link: inputValues.url\n  };\n  addFormValidator.resetValidation();\n  addCardModal.setButtonText("Saving...");\n  api.addCard(cardData).then(res => {\n    const cardElement = createCard(res);\n    cardSection.addItem(cardElement);\n    addCardModal.close();\n  }).finally(() => {\n    addCardModal.setButtonText("Save");\n  });\n}\nfunction handleLikeClick(card) {\n  console.log("like card is running");\n  // call the api and pass card.id and card.isLiked\n  api.updateCardLike(card.id, card.isLiked).then(() => {\n    card.addLike();\n    //card.isLiked = true;\n\n    //card.setLikeButtonState();\n  }).catch(err => {\n    console.error(err);\n    alert(`${err} Failed to like card`);\n  });\n\n  // after api is successful, we can then update the UI\n}\n\nfunction handleUnlikeClick(card) {\n  console.log("unlike card is running");\n  api.updateCardLike(card.id, card.isLiked).then(() => {\n    card.removeLike();\n    //card.isLiked = false;\n\n    //card.setLikeButtonState();\n  }).catch(err => {\n    console.error(err);\n    alert(`${err} Failed to unlike card`);\n  });\n}\nfunction handleImagePreview(name, link) {\n  previewImageModal.open(name, link);\n}\n//runs when clicking the trash button\nfunction handleDeleteClick(card) {\n  //runs when clicking the yes button\n  function deleteCard() {\n    //delete the card on the server.\n    deleteConfirmationModal.setButtonText("Deleting");\n    api.deleteCard(card.id).then(() => {\n      //closes modal\n      deleteConfirmationModal.close();\n      //deletes card on the UI\n      card.handleDeleteCardLocally();\n    }).catch(err => {\n      console.error(err);\n      alert(`${err} Failed to delete card`);\n    }).finally(() => {\n      deleteConfirmationModal.setButtonText("Delete");\n    });\n  }\n  deleteConfirmationModal.open();\n  deleteConfirmationModal.setSubmitHandler(deleteCard);\n}\nconst avatarButton = document.querySelector(".profile_image_edit_button");\navatarButton.addEventListener("click", () => {\n  editAvatarModal.open();\n});\n\n//event listeners\nprofileEditButton.addEventListener("click", () => {\n  const userInfo = profileUserInfo.getUserInfo();\n  profileFormValidator.resetValidation();\n  profileEditModal.setInputValues(userInfo);\n  profileEditModal.open();\n});\n\n// Add new card button\naddNewCardButton.addEventListener("click", () => {\n  addFormValidator.toggleButtonState();\n  addCardModal.open();\n});\n\n//event listeners\n\nfunction createCard(cardData) {\n  const card = new Card(cardData, "#card-template", handleImagePreview, handleDeleteClick, handleLikeClick, handleUnlikeClick);\n  return card.getView();\n}\n\n//Initialization\n\nprofileFormValidator.enableValidation();\naddFormValidator.enableValidation();\navatarUpdateValidator.enableValidation();\n\n// //Gets user info from api and sets it locally on the page - runs on page load. sets it locally\napi.getUserInfo().then(data => {\n  profileUserInfo.setUserInfo(data.name, data.about);\n  profileUserInfo.setAvatar(data.avatar);\n}).catch(err => {\n  console.error(err);\n  alert("Failed to load user info");\n});\nlet cardSection; // default value is undefined;\n\n//Gets initial cards from api\napi.getInitialCards().then(cards => {\n  console.log(">>CARDS", cards);\n  cardSection = new components_Section({\n    items: cards,\n    renderer: createCard\n  }, ".cards__list");\n  cardSection.renderItems();\n}).catch(err => {\n  console.log(err);\n  alert("Failed to load cards");\n});\n\n//Update Likes\n\n// function {\n//   api.updateCardLike();\n\n// }\n\n//Edit The Profile Avatar\nfunction handleAvatarFormSubmit(inputValues) {\n  editAvatarModal.setButtonText("Saving...");\n  api.updateAvatar(inputValues).then(res => {\n    console.log(res);\n    profileUserInfo.setAvatar(res.avatar);\n    editAvatarModal.close();\n    //modal__form.reset();\n\n    // const modal__form = document.getElementById(\n    //   "change-profile-picture-form"\n    // );\n  }).catch(error => {\n    console.log(error);\n    alert(`failed to change avatar ${error}`);\n  }).finally(() => {\n    editAvatarModal.setButtonText("Save");\n  });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///443\n')}},__webpack_exports__={};__webpack_modules__[443]()})();